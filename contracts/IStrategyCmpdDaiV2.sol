// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

interface IStrategyCmpdDaiV2 {
    function addKeeper(address _keeper) external;
    function balanceOf() external view returns (uint256);
    function balanceOfPool() external view returns (uint256);
    function balanceOfWant() external view returns (uint256);
    function cdai() external view returns (address);
    function cether() external view returns (address);
    function comp() external view returns (address);
    function comptroller() external view returns (address);
    function controller() external view returns (address);
    function dai() external view returns (address);
    function deleverageToMin() external;
    function deleverageUntil(uint256 _supplyAmount) external;
    function deposit() external;
    function execute(address _target, bytes memory _data) external payable returns (bytes memory response);
    function getBorrowable() external returns (uint256);
    function getBorrowed() external returns (uint256);
    function getBorrowedView() external view returns (uint256);
    function getColFactor() external returns (uint256);
    function getCompAccrued() external returns (uint256);
    function getCurrentLeverage() external returns (uint256);
    function getLeveragedSupplyTarget(uint256 supplyBalance) external view returns (uint256);
    function getMarketColFactor() external view returns (uint256);
    function getMaxLeverage() external view returns (uint256);
    function getName() external pure returns (string memory);
    function getSafeLeverageColFactor() external view returns (uint256);
    function getSafeSyncColFactor() external view returns (uint256);
    function getSupplied() external returns (uint256);
    function getSuppliedUnleveraged() external returns (uint256);
    function getSuppliedView() external view returns (uint256);
    function governance() external view returns (address);
    function harvest() external;
    function lens() external view returns (address);
    function leverageToMax() external;
    function leverageUntil(uint256 _supplyAmount) external;
    function performanceDevFee() external view returns (uint256);
    function performanceDevMax() external view returns (uint256);
    function performanceTreasuryFee() external view returns (uint256);
    function performanceTreasuryMax() external view returns (uint256);
    function removeKeeper(address _keeper) external;
    function setColFactorLeverageBuffer(uint256 _colFactorLeverageBuffer) external;
    function setColFactorSyncBuffer(uint256 _colFactorSyncBuffer) external;
    function setController(address _controller) external;
    function setGovernance(address _governance) external;
    function setPerformanceDevFee(uint256 _performanceDevFee) external;
    function setPerformanceTreasuryFee(uint256 _performanceTreasuryFee) external;
    function setStrategist(address _strategist) external;
    function setTimelock(address _timelock) external;
    function setWithdrawalDevFundFee(uint256 _withdrawalDevFundFee) external;
    function setWithdrawalTreasuryFee(uint256 _withdrawalTreasuryFee) external;
    function strategist() external view returns (address);
    function sync() external returns (bool);
    function timelock() external view returns (address);
    function univ2Router2() external view returns (address);
    function want() external view returns (address);
    function weth() external view returns (address);
    function withdraw(uint256 _amount) external;
    function withdraw(address _asset) external returns (uint256 balance);
    function withdrawAll() external returns (uint256 balance);
    function withdrawForSwap(uint256 _amount) external returns (uint256 balance);
    function withdrawalDevFundFee() external view returns (uint256);
    function withdrawalDevFundMax() external view returns (uint256);
    function withdrawalTreasuryFee() external view returns (uint256);
    function withdrawalTreasuryMax() external view returns (uint256);
}
